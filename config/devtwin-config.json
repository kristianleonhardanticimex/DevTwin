{
  "categories": [
    {
      "id": "software-design-architecture",
      "name": "Software Design & Architecture",
      "description": "Principles, patterns, and architectures for robust, maintainable software.",
      "subcategories": [
        {
          "id": "object-oriented-programming",
          "name": "Object-Oriented Programming",
          "description": "Principles and techniques for OOP design.",
          "featureGroups": [
            {
              "id": "oop-principles",
              "name": "Principles",
              "description": "Core OOP principles for robust code.",
              "features": [
                { "id": "solid", "name": "SOLID Principles", "description": "Follow SOLID for maintainable, extensible OOP code." },
                { "id": "inheritance-composition", "name": "Inheritance and Composition", "description": "Use inheritance and composition for code reuse and flexibility." },
                { "id": "encapsulation", "name": "Encapsulation", "description": "Hide internal state and require all interaction to be performed through methods." },
                { "id": "polymorphism", "name": "Polymorphism", "description": "Use interfaces and base classes to enable flexible code." },
                { "id": "abstraction", "name": "Abstraction", "description": "Model complex systems with simplified interfaces." }
              ]
            }
          ]
        },
        {
          "id": "functional-programming",
          "name": "Functional Programming",
          "description": "Immutability, pure functions, and functional patterns.",
          "featureGroups": [
            {
              "id": "fp-principles",
              "name": "Principles",
              "description": "Key concepts in functional programming.",
              "features": [
                { "id": "pure-functions", "name": "Pure Functions", "description": "Functions with no side effects and consistent outputs." },
                { "id": "immutability", "name": "Immutability", "description": "Prefer immutable data for safer, more predictable code." },
                { "id": "higher-order-functions", "name": "Higher-Order Functions", "description": "Functions that take or return other functions." },
                { "id": "pattern-matching", "name": "Pattern Matching", "description": "Use pattern matching for expressive, concise code." },
                { "id": "monads-functors", "name": "Monads and Functors", "description": "Advanced abstractions for managing effects and data." }
              ]
            }
          ]
        },
        {
          "id": "design-patterns",
          "name": "Design Patterns",
          "description": "Reusable solutions to common software design problems.",
          "featureGroups": [
            {
              "id": "creational-patterns",
              "name": "Creational",
              "description": "Patterns for object creation.",
              "features": [
                { "id": "singleton", "name": "Singleton", "description": "Ensure a class has only one instance." },
                { "id": "factory", "name": "Factory", "description": "Create objects without specifying the exact class." }
              ]
            },
            {
              "id": "behavioral-patterns",
              "name": "Behavioral",
              "description": "Patterns for object interaction and responsibility.",
              "features": [
                { "id": "strategy", "name": "Strategy", "description": "Select algorithm at runtime." },
                { "id": "observer", "name": "Observer", "description": "Notify multiple objects of state changes." },
                { "id": "command", "name": "Command", "description": "Encapsulate requests as objects." },
                { "id": "mediator", "name": "Mediator", "description": "Reduce coupling between components." },
                { "id": "state", "name": "State", "description": "Allow an object to alter its behavior when its state changes." },
                { "id": "visitor", "name": "Visitor", "description": "Separate algorithms from objects on which they operate." }
              ]
            },
            {
              "id": "structural-patterns",
              "name": "Structural",
              "description": "Patterns for object composition and structure.",
              "features": [
                { "id": "repository", "name": "Repository", "description": "Abstract data access logic." },
                { "id": "adapter", "name": "Adapter", "description": "Allow incompatible interfaces to work together." },
                { "id": "decorator", "name": "Decorator", "description": "Add responsibilities to objects dynamically." }
              ]
            }
          ]
        },
        {
          "id": "architecture-styles",
          "name": "Architecture Styles",
          "description": "High-level approaches to organizing software systems.",
          "featureGroups": [
            {
              "id": "architecture-patterns",
              "name": "Patterns",
              "description": "Common architectural patterns for system design.",
              "features": [
                { "id": "onion-architecture", "name": "Onion Architecture", "description": "Emphasize separation of concerns and dependency inversion." },
                { "id": "clean-architecture", "name": "Clean Architecture", "description": "Organize code into layers for maintainability and testability." },
                { "id": "hexagonal-architecture", "name": "Hexagonal Architecture", "description": "Isolate core logic from external concerns." },
                { "id": "microservices", "name": "Microservices", "description": "Build applications as a suite of small, independent services." },
                { "id": "serverless", "name": "Serverless", "description": "Architect apps using managed cloud functions." },
                { "id": "monolith", "name": "Monolith", "description": "Build as a single, unified codebase." },
                { "id": "modular-monolith", "name": "Modular Monolith", "description": "Modularize a monolith for maintainability." }
              ]
            }
          ]
        },
        {
          "id": "architectural-best-practices",
          "name": "Architectural Best Practices",
          "description": "Guidelines and principles for effective architecture.",
          "featureGroups": [
            {
              "id": "architecture-principles",
              "name": "Principles",
              "description": "Best practices for maintainable architecture.",
              "features": [
                { "id": "separation-of-concerns", "name": "Separation of Concerns", "description": "Keep different concerns in separate modules." },
                { "id": "dependency-inversion", "name": "Dependency Inversion", "description": "Depend on abstractions, not concretions." },
                { "id": "layered-architecture", "name": "Layered Architecture", "description": "Organize code into logical layers." },
                { "id": "ddd", "name": "Domain-Driven Design (DDD)", "description": "Model software based on domain logic." },
                { "id": "cqrs", "name": "CQRS", "description": "Separate read and write operations." },
                { "id": "event-sourcing", "name": "Event Sourcing", "description": "Persist state as a sequence of events." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "programming-languages",
      "name": "Programming Languages",
      "description": "Best practices, frameworks, and tools for major programming languages.",
      "subcategories": [
        {
          "id": "csharp-dotnet",
          "name": "C# / .NET",
          "description": "Best practices and tools for C# and .NET development.",
          "featureGroups": [
            {
              "id": "csharp-core",
              "name": "Core",
              "description": "Essential C# and .NET language features and patterns.",
              "features": [
                { "id": "csharp-di", "name": "Dependency Injection (built-in)", "description": ".NET's DI container for loose coupling." },
                { "id": "csharp-nullable", "name": "Nullable Reference Types", "description": "Enable null-safety in C# code." }
              ]
            },
            {
              "id": "csharp-web-apis",
              "name": "Web & APIs",
              "description": "Frameworks and patterns for building web APIs in .NET.",
              "features": [
                { "id": "aspnet-webapi", "name": "ASP.NET Web API", "description": "Build RESTful APIs with ASP.NET Core." },
                { "id": "minimal-apis", "name": "Minimal APIs", "description": "Lightweight HTTP APIs in ASP.NET Core." }
              ]
            },
            {
              "id": "csharp-data-orm",
              "name": "Data & ORM",
              "description": "Data access and ORM tools for .NET.",
              "features": [
                { "id": "ef-core", "name": "Entity Framework Core", "description": "ORM for data access in .NET." },
                { "id": "linq", "name": "LINQ", "description": "Query collections and databases with LINQ." }
              ]
            },
            {
              "id": "csharp-logging-messaging",
              "name": "Logging & Messaging",
              "description": "Logging frameworks and messaging patterns for .NET.",
              "features": [
                { "id": "serilog", "name": "Serilog", "description": "Structured logging for .NET applications." },
                { "id": "mediatr", "name": "MediatR", "description": "In-process messaging and CQRS for .NET." },
                { "id": "background-services", "name": "Background Services (IHostedService)", "description": "Run background tasks in .NET apps." }
              ]
            }
          ]
        },
        {
          "id": "javascript-typescript",
          "name": "JavaScript / TypeScript",
          "description": "Best practices and tools for JavaScript and TypeScript development.",
          "featureGroups": [
            {
              "id": "js-language-features",
              "name": "Language Features",
              "description": "Core language features and patterns for JavaScript and TypeScript.",
              "features": [
                { "id": "es-modules", "name": "ES Modules", "description": "Use ES module syntax for modular, maintainable code." },
                { "id": "async-await", "name": "Async/Await", "description": "Write asynchronous code using async/await for clarity and error handling." },
                { "id": "promises", "name": "Promises", "description": "Use Promises for managing asynchronous operations." },
                { "id": "typescript", "name": "Type Safety with TypeScript", "description": "Add static typing to JavaScript for safer, more robust code." },
                { "id": "jsdoc", "name": "JSDoc", "description": "Document code with JSDoc comments for better tooling and maintainability." }
              ]
            },
            {
              "id": "js-frameworks",
              "name": "Frameworks",
              "description": "Popular frameworks for building JavaScript and TypeScript applications.",
              "features": [
                { "id": "react", "name": "React", "description": "Build user interfaces with React.", "dependencies": ["js-language-features"] },
                { "id": "angular", "name": "Angular", "description": "Develop applications using Angular.", "dependencies": ["js-language-features"] },
                { "id": "vue", "name": "Vue", "description": "Create reactive UIs with Vue.", "dependencies": ["js-language-features"] }
              ]
            }
          ]
        },
        {
          "id": "python",
          "name": "Python",
          "description": "Best practices and tools for Python development.",
          "featureGroups": [
            {
              "id": "python-language-features",
              "name": "Language Features",
              "description": "Core language features and patterns for Python.",
              "features": [
                { "id": "type-hints", "name": "Type Hints", "description": "Add type annotations for better tooling and safety." },
                { "id": "virtual-environments", "name": "Virtual Environments", "description": "Isolate dependencies for each project." },
                { "id": "poetry-pipenv", "name": "Poetry / pipenv", "description": "Modern dependency and environment management." },
                { "id": "asyncio", "name": "Asyncio", "description": "Write asynchronous code in Python." }
              ]
            },
            {
              "id": "python-testing",
              "name": "Testing",
              "description": "Testing frameworks and practices for Python.",
              "features": [
                { "id": "pytest", "name": "pytest", "description": "Python's most popular testing framework." }
              ]
            },
            {
              "id": "python-style",
              "name": "Style",
              "description": "Code style and formatting for Python.",
              "features": [
                { "id": "pep8", "name": "PEP8", "description": "Follow Python's style guide for readable code." }
              ]
            }
          ]
        },
        {
          "id": "golang",
          "name": "Go (GoLang)",
          "description": "Best practices and tools for Go development.",
          "featureGroups": [
            {
              "id": "go-project-structure",
              "name": "Project Structure",
              "description": "Recommended structure for Go projects.",
              "features": [
                { "id": "standard-project-layout", "name": "Standard Project Layout", "description": "Organize Go projects for scalability." },
                { "id": "go-mod", "name": "go.mod", "description": "Manage dependencies and versions." }
              ]
            },
            {
              "id": "go-language-features",
              "name": "Language Features",
              "description": "Core language features and patterns for Go.",
              "features": [
                { "id": "interfaces", "name": "Interfaces", "description": "Define contracts for types." },
                { "id": "goroutines", "name": "Goroutines", "description": "Lightweight concurrency in Go." },
                { "id": "channels", "name": "Channels", "description": "Communicate safely between goroutines." },
                { "id": "error-handling", "name": "Error Handling Patterns", "description": "Idiomatic error handling in Go." }
              ]
            }
          ]
        },
        {
          "id": "rust",
          "name": "Rust",
          "description": "Best practices and tools for Rust development.",
          "featureGroups": [
            {
              "id": "rust-project-structure",
              "name": "Project Structure",
              "description": "Recommended structure for Rust projects.",
              "features": [
                { "id": "cargo-project-layout", "name": "Cargo Project Layout", "description": "Standard structure for Rust projects." }
              ]
            },
            {
              "id": "rust-language-features",
              "name": "Language Features",
              "description": "Core language features and patterns for Rust.",
              "features": [
                { "id": "ownership-borrowing", "name": "Ownership & Borrowing", "description": "Memory safety without GC." },
                { "id": "traits", "name": "Traits", "description": "Define shared behavior." },
                { "id": "lifetimes", "name": "Lifetimes", "description": "Manage references and memory safety." },
                { "id": "crates-io", "name": "Crates.io Best Practices", "description": "Package and share Rust code." },
                { "id": "tokio", "name": "Tokio for Async", "description": "Asynchronous programming in Rust." }
              ]
            }
          ]
        },
        {
          "id": "java",
          "name": "Java",
          "description": "Best practices and tools for Java development.",
          "featureGroups": [
            {
              "id": "java-frameworks",
              "name": "Frameworks",
              "description": "Popular frameworks for Java application development.",
              "features": [
                { "id": "spring-boot", "name": "Spring Boot", "description": "Rapidly build production-ready Java apps." },
                { "id": "jpa", "name": "JPA", "description": "Java Persistence API for ORM." },
                { "id": "lombok", "name": "Lombok", "description": "Reduce boilerplate with annotations." },
                { "id": "spring-di", "name": "Dependency Injection with Spring", "description": "Use Spring's DI for modularity." }
              ]
            },
            {
              "id": "java-build-tools",
              "name": "Build Tools",
              "description": "Build automation tools for Java projects.",
              "features": [
                { "id": "maven", "name": "Maven", "description": "Java build automation." },
                { "id": "gradle", "name": "Gradle", "description": "Modern build automation for Java." }
              ]
            }
          ]
        },
        {
          "id": "kotlin",
          "name": "Kotlin",
          "description": "Best practices and tools for Kotlin development.",
          "featureGroups": [
            {
              "id": "kotlin-language-features",
              "name": "Language Features",
              "description": "Core language features and patterns for Kotlin.",
              "features": [
                { "id": "coroutines", "name": "Coroutines", "description": "Asynchronous programming in Kotlin." },
                { "id": "extension-functions", "name": "Extension Functions", "description": "Add new functions to existing types." }
              ]
            },
            {
              "id": "kotlin-frameworks",
              "name": "Frameworks",
              "description": "Popular frameworks for Kotlin application development.",
              "features": [
                { "id": "ktor", "name": "Ktor", "description": "Asynchronous web framework for Kotlin." },
                { "id": "jetpack-compose", "name": "Jetpack Compose (Android)", "description": "Modern UI toolkit for Android." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "testing-quality",
      "name": "Testing & Quality",
      "description": "Unit, integration, and quality practices for robust software.",
      "subcategories": [
        {
          "id": "unit-testing",
          "name": "Unit Testing",
          "description": "Practices and tools for writing and running unit tests.",
          "featureGroups": [
            {
              "id": "dotnet-unit-testing",
              "name": ".NET",
              "description": "Unit testing frameworks for .NET.",
              "features": [
                { "id": "xunit", "name": "xUnit", "description": "Microsoft's recommended unit testing framework for .NET." },
                { "id": "nunit", "name": "NUnit", "description": "Popular alternative unit testing framework for .NET." },
                { "id": "mstest", "name": "MSTest", "description": "Built-in unit testing framework for .NET." }
              ]
            },
            {
              "id": "java-unit-testing",
              "name": "Java",
              "description": "Unit testing frameworks for Java.",
              "features": [
                { "id": "junit", "name": "JUnit", "description": "Most popular Java unit testing framework." },
                { "id": "testng", "name": "TestNG", "description": "Powerful Java testing framework." }
              ]
            },
            {
              "id": "js-unit-testing",
              "name": "JavaScript",
              "description": "Unit testing frameworks for JavaScript.",
              "features": [
                { "id": "jest", "name": "Jest", "description": "Delightful JavaScript testing framework." },
                { "id": "mocha", "name": "Mocha", "description": "Flexible JavaScript test framework." },
                { "id": "vitest", "name": "Vitest", "description": "Fast unit testing for Vite projects." }
              ]
            },
            {
              "id": "python-unit-testing",
              "name": "Python",
              "description": "Unit testing frameworks for Python.",
              "features": [
                { "id": "pytest", "name": "pytest", "description": "Python's most popular testing framework." }
              ]
            },
            {
              "id": "go-unit-testing",
              "name": "Go",
              "description": "Unit testing frameworks for Go.",
              "features": [
                { "id": "go-test", "name": "Go test", "description": "Built-in Go testing tool." }
              ]
            },
            {
              "id": "rust-unit-testing",
              "name": "Rust",
              "description": "Unit testing frameworks for Rust.",
              "features": [
                { "id": "rust-test", "name": "Rust test", "description": "Built-in Rust testing tool." }
              ]
            }
          ]
        },
        {
          "id": "integration-testing",
          "name": "Integration Testing",
          "description": "Practices and tools for integration and end-to-end testing.",
          "featureGroups": [
            {
              "id": "integration-tools",
              "name": "Tools",
              "description": "Tools for integration and end-to-end testing.",
              "features": [
                { "id": "testcontainers", "name": "TestContainers", "description": "Run test dependencies in containers." },
                { "id": "playwright", "name": "Playwright", "description": "End-to-end browser testing for modern web apps." },
                { "id": "selenium", "name": "Selenium", "description": "Browser automation for testing web apps." },
                { "id": "cypress", "name": "Cypress", "description": "Fast, easy, and reliable testing for anything that runs in a browser." }
              ]
            }
          ]
        },
        {
          "id": "test-practices",
          "name": "Test Practices",
          "description": "Patterns and best practices for writing effective tests.",
          "featureGroups": [
            {
              "id": "test-patterns",
              "name": "Patterns",
              "description": "Common patterns for structuring and organizing tests.",
              "features": [
                { "id": "arrange-act-assert", "name": "Arrange-Act-Assert Pattern", "description": "Structure tests for clarity." },
                { "id": "test-data-builders", "name": "Test Data Builders", "description": "Create complex test data easily." },
                { "id": "mocking", "name": "Mocking / Faking / Stubbing", "description": "Replace dependencies for isolated tests." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "devops-cicd",
      "name": "DevOps & CI/CD",
      "description": "Automation, pipelines, and deployment best practices.",
      "subcategories": [
        {
          "id": "github-actions-mcp",
          "name": "GitHub Actions / MCP",
          "description": "CI/CD workflows and automation with GitHub Actions and Model Context Protocol.",
          "featureGroups": [
            {
              "id": "workflow-design",
              "name": "Workflow",
              "description": "Workflow design and reusable automation patterns for GitHub Actions.",
              "features": [
                { "id": "workflow-file-layout", "name": "Workflow File Layout", "description": "Organize workflows for clarity and reuse." },
                { "id": "reusable-workflows", "name": "Reusable Workflows", "description": "Share workflow logic across projects." },
                { "id": "secrets-environments", "name": "Secrets and Environments", "description": "Securely manage secrets and environment variables." },
                { "id": "caching", "name": "Caching", "description": "Speed up builds with dependency caching." }
              ]
            }
          ]
        },
        {
          "id": "azure-pipelines",
          "name": "Azure Pipelines",
          "description": "Build, test, and deploy automation using Azure Pipelines.",
          "featureGroups": [
            {
              "id": "pipeline-features",
              "name": "Features",
              "description": "Key features and best practices for Azure Pipelines.",
              "features": [
                { "id": "multi-stage-pipelines", "name": "Multi-Stage Pipelines", "description": "Model complex workflows with multiple stages." },
                { "id": "templates-variables", "name": "Templates and Variables", "description": "Reuse pipeline logic and manage configuration." },
                { "id": "deployment-slots", "name": "Deployment Slots", "description": "Deploy safely with slots." },
                { "id": "yaml-pipelines", "name": "YAML Pipelines", "description": "Define pipelines as code." }
              ]
            }
          ]
        },
        {
          "id": "docker",
          "name": "Docker",
          "description": "Containerization and orchestration with Docker.",
          "featureGroups": [
            {
              "id": "docker-features",
              "name": "Features",
              "description": "Essential Docker features and best practices.",
              "features": [
                { "id": "multi-stage-builds", "name": "Multi-Stage Builds", "description": "Optimize Docker images with multi-stage builds." },
                { "id": "docker-compose", "name": "Docker Compose", "description": "Define and run multi-container Docker apps." },
                { "id": "dockerfile-best-practices", "name": "Dockerfile Best Practices", "description": "Write efficient, secure Dockerfiles." }
              ]
            }
          ]
        },
        {
          "id": "kubernetes",
          "name": "Kubernetes",
          "description": "Container orchestration and deployment with Kubernetes.",
          "featureGroups": [
            {
              "id": "kubernetes-features",
              "name": "Features",
              "description": "Key Kubernetes features and configuration options.",
              "features": [
                { "id": "helm-charts", "name": "Helm Charts", "description": "Package and deploy Kubernetes applications." },
                { "id": "manifests", "name": "Manifests", "description": "Declarative configuration for Kubernetes resources." },
                { "id": "kustomize", "name": "Kustomize", "description": "Customize Kubernetes YAML configurations." },
                { "id": "liveness-readiness-probes", "name": "Liveness/Readiness Probes", "description": "Monitor app health in Kubernetes." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "documentation-dx",
      "name": "Documentation & DX",
      "description": "Documentation standards and developer experience integrations.",
      "subcategories": [
        {
          "id": "documentation-practices",
          "name": "Documentation Practices",
          "description": "Best practices and templates for documenting code and projects.",
          "featureGroups": [
            {
              "id": "doc-templates",
              "name": "Templates",
              "description": "Templates for project and code documentation.",
              "features": [
                { "id": "readme-templates", "name": "README.md Templates", "description": "Standardize project documentation." },
                { "id": "adr", "name": "ADR (Architecture Decision Records)", "description": "Record architectural decisions." }
              ]
            },
            {
              "id": "doc-frameworks",
              "name": "Frameworks",
              "description": "Frameworks and conventions for code documentation.",
              "features": [
                { "id": "diataxis", "name": "Diataxis Framework", "description": "Organize documentation by purpose." },
                { "id": "docstrings-jsdoc-xml", "name": "Docstrings / JSDoc / XML Comments", "description": "Document code for better tooling." }
              ]
            }
          ]
        },
        {
          "id": "mcp-integrations",
          "name": "MCP Integrations",
          "description": "Integrations with Model Context Protocol (MCP) tools and platforms.",
          "featureGroups": [
            {
              "id": "mcp-tools",
              "name": "Tools",
              "description": "Tools for integrating with MCP and developer portals.",
              "features": [
                { "id": "github-mcp", "name": "GitHub MCP", "description": "Integrate with GitHub's Model Context Protocol." },
                { "id": "playwright-mcp", "name": "Playwright MCP", "description": "Integrate Playwright with MCP." },
                { "id": "backstage", "name": "Backstage.io", "description": "Developer portal for managing software." },
                { "id": "mkdocs-docusaurus", "name": "mkdocs / Docusaurus", "description": "Static site generators for documentation." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "frontend",
      "name": "Frontend",
      "description": "Modern frontend frameworks, patterns, and UI testing.",
      "subcategories": [
        {
          "id": "react",
          "name": "React",
          "description": "Best practices and tools for React development.",
          "featureGroups": [
            {
              "id": "react-component-patterns",
              "name": "Component Patterns",
              "description": "Patterns for building and composing React components.",
              "features": [
                { "id": "functional-components", "name": "Functional Components", "description": "Use function-based components for simplicity and performance." },
                { "id": "component-composition", "name": "Component Composition", "description": "Build complex UIs by composing smaller components." }
              ]
            },
            {
              "id": "react-state-data",
              "name": "State & Data",
              "description": "State management and data handling in React.",
              "features": [
                { "id": "hooks", "name": "Hooks", "description": "Manage state and side effects in React components." },
                { "id": "context-api", "name": "Context API", "description": "Share state across the component tree." },
                { "id": "react-query", "name": "React Query", "description": "Data fetching and caching for React apps." },
                { "id": "zustand-redux", "name": "Zustand / Redux Toolkit", "description": "State management libraries for React." }
              ]
            }
          ]
        },
        {
          "id": "angular",
          "name": "Angular",
          "description": "Best practices and tools for Angular development.",
          "featureGroups": [
            {
              "id": "angular-structure",
              "name": "Structure",
              "description": "Organizational patterns and structure for Angular apps.",
              "features": [
                { "id": "ngmodules", "name": "NgModules", "description": "Organize Angular apps into cohesive blocks of functionality." },
                { "id": "angular-cli", "name": "Angular CLI", "description": "Command-line tooling for Angular projects." }
              ]
            },
            {
              "id": "angular-patterns",
              "name": "Patterns",
              "description": "Design and reactive patterns for Angular development.",
              "features": [
                { "id": "angular-di", "name": "Dependency Injection", "description": "Use Angular's DI system for modularity and testability." },
                { "id": "rxjs-patterns", "name": "RxJS Patterns", "description": "Reactive programming with RxJS in Angular." }
              ]
            }
          ]
        },
        {
          "id": "vue",
          "name": "Vue",
          "description": "Best practices and tools for Vue development.",
          "featureGroups": [
            {
              "id": "vue-structure",
              "name": "Structure",
              "description": "Component and state structure for Vue applications.",
              "features": [
                { "id": "composition-api", "name": "Composition API", "description": "Modern API for organizing Vue component logic." },
                { "id": "vuex", "name": "Vuex", "description": "State management for Vue applications." },
                { "id": "vue-router", "name": "Vue Router", "description": "Routing for single-page Vue apps." }
              ]
            }
          ]
        },
        {
          "id": "ui-testing",
          "name": "UI Testing",
          "description": "Tools and practices for frontend UI testing.",
          "featureGroups": [
            {
              "id": "ui-testing-tools",
              "name": "Tools",
              "description": "Popular tools for UI and component testing.",
              "features": [
                { "id": "playwright", "name": "Playwright", "description": "End-to-end browser testing for any frontend." },
                { "id": "testing-library", "name": "Testing Library (React, Angular)", "description": "User-centric component testing for React and Angular.", "dependencies": ["react", "angular"] },
                { "id": "storybook", "name": "Storybook", "description": "Develop and document UI components in isolation." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "security",
      "name": "Security",
      "description": "Secure coding practices, authentication, and secrets management.",
      "subcategories": [
        {
          "id": "security-practices",
          "name": "Security Practices",
          "description": "Best practices and techniques for secure software development.",
          "featureGroups": [
            {
              "id": "security-practices-group",
              "name": "Practices",
              "description": "Core security practices for application development.",
              "features": [
                { "id": "owasp-top-10", "name": "OWASP Top 10", "description": "Address the most critical security risks to web applications." },
                { "id": "secure-code-practices", "name": "Secure Code Practices", "description": "Write code that avoids common vulnerabilities." }
              ]
            },
            {
              "id": "security-techniques",
              "name": "Techniques",
              "description": "Techniques for authentication, authorization, and secure data handling.",
              "features": [
                { "id": "input-validation", "name": "Input Validation / Output Encoding", "description": "Prevent injection attacks." },
                { "id": "authentication", "name": "Authentication (JWT, OAuth2)", "description": "Securely authenticate users." },
                { "id": "authorization", "name": "Authorization", "description": "Control access to resources." },
                { "id": "rate-limiting", "name": "Rate Limiting", "description": "Prevent abuse by limiting requests." },
                { "id": "secrets-management", "name": "Secrets Management", "description": "Securely store and access secrets." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "best-practices-principles",
      "name": "Best Practices & Principles",
      "description": "General software engineering principles and best practices.",
      "subcategories": [
        {
          "id": "general-principles",
          "name": "General",
          "description": "Foundational principles for writing clean, maintainable, and effective code.",
          "featureGroups": [
            {
              "id": "general-principles-group",
              "name": "Principles",
              "description": "Widely accepted software engineering principles.",
              "features": [
                { "id": "boy-scout-rule", "name": "Boy Scout Rule", "description": "Always leave the codebase cleaner than you found it." },
                { "id": "kiss", "name": "Keep It Simple, Stupid (KISS)", "description": "Prefer simple solutions." },
                { "id": "dry", "name": "Don't Repeat Yourself (DRY)", "description": "Avoid code duplication." },
                { "id": "yagni", "name": "You Aren’t Gonna Need It (YAGNI)", "description": "Only build what you need." },
                { "id": "fail-fast", "name": "Fail Fast", "description": "Detect errors early." },
                { "id": "twelve-factor-app", "name": "Twelve-Factor App", "description": "Best practices for building SaaS apps." },
                { "id": "convention-over-configuration", "name": "Convention over Configuration", "description": "Prefer sensible defaults." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "code-management",
      "name": "Code Management",
      "description": "Branching, versioning, and repository strategies.",
      "subcategories": [
        {
          "id": "workflows",
          "name": "Workflows",
          "description": "Branching and development workflow strategies.",
          "featureGroups": [
            {
              "id": "workflow-strategies",
              "name": "Strategies",
              "description": "Strategies for managing branches and releases.",
              "features": [
                { "id": "git-flow", "name": "Git Flow", "description": "Branching model for managing features and releases." },
                { "id": "github-flow", "name": "GitHub Flow", "description": "Lightweight workflow for continuous delivery." },
                { "id": "trunk-based-development", "name": "Trunk-Based Development", "description": "Keep a single branch for all development." }
              ]
            }
          ]
        },
        {
          "id": "versioning",
          "name": "Versioning",
          "description": "Versioning strategies and commit conventions.",
          "featureGroups": [
            {
              "id": "versioning-group",
              "name": "Versioning",
              "description": "Approaches for versioning and commit messages.",
              "features": [
                { "id": "semantic-versioning", "name": "Semantic Versioning", "description": "Use MAJOR.MINOR.PATCH versioning for all projects." },
                { "id": "conventional-commits", "name": "Conventional Commits", "description": "Use a standard format for commit messages." }
              ]
            }
          ]
        },
        {
          "id": "repositories",
          "name": "Repositories",
          "description": "Repository organization and management strategies.",
          "featureGroups": [
            {
              "id": "repo-strategies",
              "name": "Strategies",
              "description": "Strategies for organizing code repositories.",
              "features": [
                { "id": "monorepo-polyrepo", "name": "Monorepo vs Polyrepo", "description": "Choose the right repo strategy for your team." }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "tooling",
      "name": "Tooling",
      "description": "Linters, code quality, and automation tools.",
      "subcategories": [
        {
          "id": "linters",
          "name": "Linters",
          "description": "Tools for static code analysis and style enforcement.",
          "featureGroups": [
            {
              "id": "linters-group",
              "name": "Linters",
              "description": "Popular linters for various programming languages.",
              "features": [
                { "id": "eslint-tslint", "name": "ESLint / TSLint", "description": "Lint JavaScript and TypeScript code." },
                { "id": "prettier", "name": "Prettier", "description": "Code formatter for consistent style." },
                { "id": "stylecop-fxcop", "name": "StyleCop / FxCop", "description": "Lint and analyze .NET code." }
              ]
            }
          ]
        },
        {
          "id": "quality-tools",
          "name": "Quality Tools",
          "description": "Tools for automated code quality checks and dependency management.",
          "featureGroups": [
            {
              "id": "quality-tools-group",
              "name": "Quality Tools",
              "description": "Automated tools for code quality and dependency updates.",
              "features": [
                { "id": "sonarqube", "name": "SonarQube", "description": "Continuous inspection of code quality." },
                { "id": "dependabot", "name": "Dependabot", "description": "Automated dependency updates." },
                { "id": "renovate", "name": "Renovate", "description": "Automated dependency management and updates." }
              ]
            }
          ]
        }
      ]
    }
  ]
}
